// Code generated for package util by go-bindata DO NOT EDIT. (@generated)
// sources:
// static/pages/writing.html
package util

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _staticPagesWritingHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5b\x5f\x6f\x1b\xc7\xb5\x7f\x37\xe0\xef\x30\x99\x08\x10\x75\xa1\xdd\x95\x28\x99\xc8\x55\xb4\xba\x48\xcc\xdc\x46\xa8\xe3\x18\x96\x15\xe4\x4d\x18\xee\x0e\xb9\x23\xcd\xce\xac\x67\x66\x49\xd1\x02\x01\x27\xad\xd3\x34\x48\x00\x07\x4d\x80\x34\x4d\xea\xa4\x48\x82\xa0\x68\xec\x3e\xb5\x41\x52\xc7\x1f\x26\xa2\x24\x3f\xf5\x2b\x14\xb3\xcb\xfd\x43\x72\x49\x51\xb2\xac\x4a\xad\xf9\x20\x71\x66\xe7\xfc\x99\xf9\xfd\xce\xcc\xd9\xdd\xc3\x65\x4f\xf9\x14\x50\xc4\x1a\x36\xbc\xe5\xc1\x95\x8b\x17\x2e\x5e\x58\xf6\x30\x72\x57\x2e\x5e\x00\x00\x80\x65\x1f\x2b\x04\x1c\x0f\x09\x89\x95\x0d\x43\x55\x37\x5e\x80\x7d\xd7\x3c\xa5\x02\x03\xdf\x0c\x49\xd3\x86\x6f\x1a\xeb\x2f\x19\x97\xb9\x1f\x20\x45\x6a\x14\x43\xe0\x70\xa6\x30\x53\x36\x5c\x7d\xc5\xc6\x6e\x03\xf7\x8b\x32\xe4\x63\x1b\x36\x09\x6e\x05\x5c\xa8\xdc\xe8\x16\x71\x95\x67\xbb\xb8\x49\x1c\x6c\x44\x8d\x59\x40\x18\x51\x04\x51\x43\x3a\x88\x62\x7b\xbe\x48\x13\x0a\x95\xc7\x45\x4e\xcf\x26\xc9\x2c\x2a\xa2\x28\x5e\xa9\x56\xaf\xae\x19\xbf\x78\x7d\xd9\x8a\x9b\xbd\x6b\xcf\x19\x06\x78\x99\x73\x25\x95\x40\x01\xb8\xbc\xb6\x06\x0c\x23\xb9\x46\x09\xdb\x02\x02\x53\x1b\x4a\xd5\xa6\x58\x7a\x18\x2b\x08\x3c\x81\xeb\x36\xb4\xa4\x42\x8a\x38\x56\x2d\x91\x35\x7d\xc2\x4c\x47\x4a\x78\x14\x69\x87\xfb\x3e\xef\x17\x93\x8e\x20\x81\x02\x52\x38\xd9\xb0\xcd\x9b\x21\x16\x6d\x63\xc1\xbc\x64\xce\x47\x76\x36\x25\x5c\x59\xb6\xe2\xa1\x2b\x17\x2f\x2c\x5b\x3d\xdc\x2e\x5e\x58\xae\x71\xb7\x9d\xe8\xd2\xbd\x58\xf4\x5a\x51\x8f\x4b\x9a\xc0\xa1\x48\x4a\x1b\x32\xd4\xac\x21\x01\xe2\x7f\x86\x8b\xc4\x16\xa8\x35\xe2\xff\xd2\x43\x2e\x6f\x19\xd2\x87\x39\xd9\x41\x79\xbd\xd4\x88\x30\x2c\x80\x6b\xd4\x29\xde\x06\x9b\xa1\x54\xa4\xde\x36\x7a\x18\x18\x35\xac\x5a\x18\xb3\x41\x1d\x91\x1e\x94\x2c\x04\xec\x77\xc7\xa8\x09\xc4\xdc\x44\x23\xa2\xa4\xc1\x0c\xa2\xb0\x2f\x0d\x07\x33\x85\x45\x91\xb2\x78\xd9\x9a\x0d\xb0\xed\x53\x26\x6d\xa8\x69\xb9\x64\x59\xad\x56\xcb\x6c\x2d\x98\x5c\x34\xac\xf2\xdc\xdc\x9c\x25\x9b\x0d\x08\x62\x7a\xc1\xf2\x1c\x04\x1e\x26\x0d\x4f\xc5\xdf\xeb\x84\x52\x1b\x32\xce\x30\x04\x52\x09\xbe\x85\x6d\xe8\x84\x42\x60\xa6\x2e\x73\xca\x05\x2c\xb6\xaa\x3f\xf1\x70\x83\x12\x86\x1d\x14\xd8\x50\xf0\x90\xb9\x30\xdf\xbd\xc9\x09\x1b\xec\x4f\xfc\x80\x00\x09\x82\x0c\x8f\xb8\x2e\x66\x36\x54\x22\xc4\xe9\x8a\xf8\xc2\x28\x8f\x31\xac\x83\xe7\x65\xbe\x6d\xc3\x39\x30\x07\xca\x8b\xa0\xbc\x08\x41\x9d\x3b\xa1\x44\x35\x8a\x6d\x58\x47\x54\xe2\x51\xcb\x15\x2d\x59\x80\x94\x07\x5c\x1b\xbe\x56\x5e\x00\xf3\xff\x8b\xca\xa0\x0c\xb4\xaa\x79\xa3\x0c\xca\xaf\x2e\xe4\xdb\x46\xf9\x8d\x17\xb2\x36\x28\x1b\x65\x6f\x91\x96\x8d\x05\xaf\x42\xcb\x60\xc1\x5b\xcc\x5f\x03\xe5\x5b\x10\x58\xe3\xec\x3a\x44\x38\x14\x03\x67\xdb\x86\xf3\x65\x08\x9c\xb6\x0d\xe7\x17\x20\x10\x36\x5c\xd4\x92\xcb\x1a\xa9\x91\x30\x2b\xc1\x59\x23\x8b\xe5\x5e\xbb\x80\x61\x16\x1a\xe4\xae\xe5\x92\x66\x3e\x16\x72\xed\x38\x80\xa2\x50\x49\xf6\x16\x44\x18\x10\x5c\xaf\xa4\xfe\xaa\x81\x6b\xc7\x0d\xd1\x20\xcc\x50\x3c\x58\x02\xf3\x97\x82\x6d\x38\x22\xba\x04\x6f\x8d\x0f\x1e\x6a\xf8\xae\x51\x01\xbc\x5e\x97\x58\xe9\xef\x0b\x85\x81\x52\xe7\xc2\x4f\xbd\x1a\xba\x5a\x0b\x95\xe2\x2c\x51\x5a\x53\x0c\xd4\x14\x33\x02\x41\x7c\x24\xda\x40\x86\x35\x9f\xa8\x8d\x9a\x1a\x72\xbf\xc6\x95\xe2\x7e\x3c\x83\x17\xe1\xca\x1a\x6a\xe2\x65\x2b\x56\x36\xda\x58\xce\x7d\x44\xb1\x50\x20\xfa\x6b\xc8\xd0\x71\xb0\x94\xa9\x09\x97\xc8\x80\xa2\xf6\x12\xd0\xe1\xf4\xe2\x58\x06\xc6\xe8\x01\xe2\xda\x50\x60\x19\x52\xf5\x9a\x6c\xc0\x95\xdd\x47\x9f\x77\xbf\xfb\x64\xef\xdd\xbb\xdd\xf7\xee\x8d\x41\x38\x8f\xe1\xe1\x1e\xeb\x63\x86\x62\x35\xd6\x1d\xef\xd2\xc0\xe8\x8d\x0d\x4d\x0b\xb8\x52\xbd\xba\xb6\xf7\xd9\x07\xdd\xf7\xbe\xec\x7e\xfc\xce\xb2\xe5\x5d\x1a\xa7\x64\xd8\xe6\xc6\x86\xde\x93\xe1\x48\x37\x8b\x44\x35\xec\x46\x43\xf0\x30\x00\x05\x4c\x2a\x94\xa6\xa8\x86\x69\x9e\x5f\xd2\x37\xca\x40\x7f\x89\x94\x45\x97\xf5\xa9\x11\x7d\x99\x44\xe1\x00\x5d\xa5\x6f\xcc\xcf\x4d\xe2\x49\xe1\x5c\x1c\x0f\x3b\x5b\x20\xfb\x6a\x10\xa6\xf7\xc6\x21\xff\x26\x53\x1f\x99\x20\x2c\x08\xd5\xb0\x11\x23\xea\x87\x40\xb5\x03\x6c\x43\x81\x5c\xc2\x61\x2f\x4b\xa8\x32\x79\x15\xf9\x18\x46\x8c\x43\x94\xb8\x4c\x8e\xd9\x60\x8b\x3e\x4d\x44\x43\x9c\xca\x02\xce\x1c\x4a\x9c\xad\xa4\xe3\xb2\xb6\x8f\xdd\xff\x0f\x59\x69\xe6\x88\x8a\x77\x76\x48\x1d\xe0\x9b\x60\xca\xac\x5e\x5d\x33\xb5\x97\x20\xb1\xd2\xe9\x38\xb1\xde\x9d\x1d\xcc\xdc\x4e\xe7\x28\x6b\xd4\x47\x8a\xdc\x1a\xc5\xab\xad\xf1\x48\x27\x73\x04\xb5\xfa\xf3\x52\x24\x55\x7a\xfc\xc9\xa3\xc7\xbf\x79\x7f\xf7\x87\x0f\x67\x8e\xe0\xd5\xc4\x1c\x04\x05\xfb\xf6\xd8\xb1\x67\x9f\x76\x2e\x93\x01\x77\x8f\x47\xbb\x9e\x6c\x46\xbb\xb8\xe3\x84\x69\xd7\xb3\xf2\xb4\x69\xd7\x33\x73\x44\xda\x55\x23\xa9\xd2\xc1\x9d\x9f\x0e\xee\x3f\x78\x46\xbb\x89\x69\xe7\x50\x1e\xba\x75\x8a\x04\x3e\x1e\xf5\x72\xf2\x19\xfd\xb2\xce\x13\xa6\x60\xce\xda\xd3\xa6\x61\xce\xd4\x11\xa9\x78\x39\x95\x7c\xc6\xc1\x89\x38\xa8\xbb\x24\xa1\xfc\x78\x0c\x4c\xa5\x33\xfe\x25\x5d\x27\xcc\xbe\xd4\xd2\xd3\xe6\x5e\x6a\xe8\x88\xcc\xd3\x6e\xae\x11\xca\xcf\x04\xef\xa4\x8f\x28\x4d\x8e\xb6\x0d\x0f\xd3\x00\xf6\x4d\x5b\xe1\x6d\x05\xf4\x1f\xc3\x0f\x15\x76\xa3\x07\x17\x5a\x64\x92\x14\x74\x02\x3f\xc6\xdf\x02\xa4\xa3\x4e\x22\xb7\x8e\x30\xab\x32\xb9\x5a\x4d\x8f\xf2\x55\xf7\x4a\x8c\xe7\x61\x79\xf7\x6a\xf5\xb4\x32\xef\x82\x20\xe5\x4c\x09\x4e\x73\x31\x99\xcc\xa0\xf7\xb5\x17\x61\x3b\x3b\x51\x10\xac\x56\x3b\x9d\x89\x56\xe5\x6c\xa2\xb3\x86\x1d\x81\x55\x8a\x50\xdc\x8c\x51\x9a\x6c\x05\x0f\x83\x32\xd6\x78\x96\xe0\xcc\x4f\x39\xd7\xec\x87\x35\xee\x3d\x4d\x68\xc7\x69\x39\xa5\x3b\xf7\xd5\x6b\x6f\x2c\x9e\xf1\x3b\xf6\x88\xb7\x24\x68\x2e\x6e\x60\x86\xe2\x47\xe7\xfd\x04\x84\x2b\x7b\x9f\x3c\xe8\xde\xfd\xa6\x7b\xf7\xc1\xfe\x47\xdf\x9e\x2e\xef\xe2\x23\x3d\x3a\xb9\x6a\x7c\x1b\x16\x9e\xfd\x3a\xab\x28\x7c\x3e\x16\x3d\x5c\x9a\xfc\x8c\xd2\xec\xed\x5b\x87\x98\xdf\xab\x41\x73\xf1\x95\x5e\x4f\x76\x5a\xeb\x5e\x33\xee\x06\x4a\x84\xf8\x18\x47\xf5\x59\xdc\xbf\xa2\xf9\x87\x62\x82\x03\x65\xef\xde\xd7\x07\x0f\xfe\xb4\x7e\xfd\xca\xbf\x83\x10\x79\x0f\x8b\xf6\x24\x8d\xce\xba\x1e\x93\x62\xaa\x25\x26\xa7\x42\xf4\x50\xdc\xc5\xd2\x11\xa4\x86\xdd\x5a\x3b\x53\xd2\x4b\x30\xb2\xad\x2d\x22\xc2\xfa\xf5\x2b\x93\x6d\x6c\xa0\x3f\x63\xe9\xd7\x3a\xb9\x7f\x63\xf3\x9b\xbd\xef\xbe\x5a\xbf\x7e\xe5\xf1\x67\xb7\x0f\x1e\x7d\xd4\xfd\xc3\x1f\x77\x1f\x7e\xb1\xff\xe9\xaf\xbb\x77\xfe\xb2\xff\xf0\x43\xbd\x1d\x75\x3f\xfb\x6b\xf7\xf3\xdb\x3f\xdf\x7e\xbb\xfb\xcd\xdb\xff\xfc\xc7\xa7\x9e\x52\x81\x5c\xb2\x2c\x14\x10\x43\xbb\x63\x92\xc0\x94\x35\x8b\x04\x3f\xdf\x7e\x2b\xb9\xe6\xb7\x49\x60\x92\x80\x04\x26\xc3\x2a\xd7\x1f\x34\x4d\xc9\xbd\xd0\x74\xb8\x6f\x39\x44\xb5\x37\x25\x67\xff\x47\xb0\x1d\xbd\xab\x3b\xdf\x69\x56\x84\x8c\xcb\x7d\x44\x98\x3c\x3c\x18\xaa\xf1\xc0\xd3\x0a\x05\x8d\x36\x12\x18\x15\x87\x40\x4a\xac\xd4\xfd\x2c\x28\xaa\x49\x97\xe0\x2d\x69\xc3\x85\x27\x8f\x89\x9e\x91\x98\xc1\x2b\x17\x2f\xec\xec\x18\x40\x20\xd6\xc0\x60\x8a\xcc\x82\xa9\x26\x58\xb2\x41\x1c\x24\x3d\xdb\x9d\x8e\x1e\x34\xd5\x8c\xff\x1b\x00\x33\x17\x18\xba\x51\x30\x51\x2b\x99\xe9\x31\x43\xab\xcf\xb9\xf1\x51\xb3\xfb\xfd\xed\x83\x2f\xdf\xdf\xfd\xfe\xf6\xee\xf7\x7f\xee\xde\xbb\xd7\xbd\xfb\xc1\x69\x13\xf8\x6c\xa4\x2b\x95\x73\x92\xae\x54\x9e\xa5\x2b\x03\xeb\x90\x46\x79\xa5\x30\x5d\xa9\xfc\x67\xa6\x2b\x95\x73\x9d\xae\xa4\x20\x46\x43\x32\x04\xd7\x9f\x3c\x5d\xa9\x0c\xa7\x2b\x03\x67\x7d\x25\x3d\xeb\x8f\x97\xba\x54\x4e\x39\x75\xa9\x8c\x4f\x5d\x2a\x45\xa9\x4b\xb3\x62\x46\xd9\x0b\x45\x96\xce\x4e\x72\x57\x64\x80\xb1\x6b\x32\x1c\x56\x4c\xec\x86\xa6\xc3\xac\x06\x56\xab\xd7\xcc\xc0\x0b\xce\x7d\xea\x52\x39\xdf\xa9\x4b\xa5\x20\x75\xa9\x9c\x74\xea\x52\x99\x38\x75\xa9\x9c\x7e\xea\x52\x79\x96\xba\x14\x1b\x1a\x99\xba\x74\xef\xfc\xad\x7b\xff\x57\x8f\xef\x7c\xb0\xff\xf0\xfe\x79\x48\x61\xd6\x25\x16\x2c\x7a\x35\x71\x58\x84\xee\xff\xfe\xc7\xee\xc3\x8f\xf7\x3f\xfa\x76\xef\xdd\xbf\x47\xd8\x9e\x91\x07\x7f\xd9\x0c\x34\x69\xb3\x56\x76\x6f\x9c\xf4\x75\x3a\x4f\x14\xac\x89\x9a\x34\x50\x27\xf2\x3f\x8b\xa7\x7e\xf9\xc3\x62\xe9\x87\xdd\x47\x9f\xef\xbd\xf7\x55\x7c\xf6\xec\x3e\xfa\x72\xef\xad\x07\xdd\xfb\xbf\xed\xde\xf9\x76\x16\x74\x7f\xfc\xe1\xe0\xfe\xfd\x83\x9f\x7e\xd7\xbd\xf3\xf5\xf9\x3e\x23\xae\x21\x29\x5b\x5c\xb8\x93\xb2\xaf\xfb\xe0\x9d\xfd\x2f\xde\x3a\x03\xd4\x8b\x13\xaa\x20\x75\x3f\xa6\x62\x36\x1d\x8d\x77\xda\x9a\x9c\x74\x19\x67\x13\xe1\x4e\x07\x16\x50\x31\x31\x7c\x5c\x2a\xf6\xcb\x9f\x53\x2a\x3e\xc1\x6e\x7f\x5a\x05\x83\xcb\x56\xaf\x70\xf1\x30\xbf\x0b\x8a\x22\x8b\x0b\x21\x83\x0c\x2c\xa6\x8c\x56\x54\xbc\x6b\x50\xfd\x37\x06\xad\x26\x30\xda\x2a\x2e\xd3\x8c\x9c\x8e\xc4\x24\xb9\x85\x97\xc0\xfc\x82\x9e\x44\xc4\x07\xca\x1b\x51\x29\x75\x70\xa4\x62\x51\x9d\x19\x64\xa5\xa2\x69\x19\x76\x32\x78\xaa\x54\x0f\x99\xa3\x08\x67\xa0\x34\x03\x76\xfa\x35\x4f\x95\xa0\x99\x5b\xe7\x19\x93\xb3\xd2\x74\xf4\x3e\x7b\x7a\x16\x64\x72\x78\x48\x50\x7f\xb0\x19\x08\xdc\xc4\x4c\x55\x71\x1d\x85\x54\x95\x66\x5e\x1c\x1e\x34\x55\x9a\xd6\x87\xe9\xf4\x8c\x89\x18\xf1\x91\xc2\xa5\x1d\x20\x1d\xc1\x29\xbd\xa1\x97\x63\x0e\x74\x66\xc1\xc2\xdc\x5c\xa1\xa8\x89\x36\xd1\x76\xa9\xc0\xb2\xfe\xf8\x58\x79\xdc\x5d\x02\xf0\xda\xeb\x6b\x37\xe0\x6c\xf1\xa0\x50\xd0\x25\x00\x2d\x89\x9a\x78\xd4\x10\x17\x29\xb4\xa4\xdd\xd4\x1c\x99\x9e\x31\x25\x16\x04\x51\x72\x0b\x97\x66\x46\x48\xf4\x6a\x4c\x97\x72\x0b\x14\x17\x8c\x16\xae\x52\x6e\x21\xcc\xa8\x46\x75\x7a\xc6\x74\xa4\x2c\x25\xa5\xa9\x70\x16\xc0\x1a\xe5\xce\x16\x2c\x5a\x83\xe4\x43\xea\x89\x11\xf0\x9c\x6d\x03\xc8\xb7\xe0\x58\x6b\x83\x16\x91\xeb\x5e\xd6\x8c\x2d\xc5\xd5\xb2\x86\xab\x33\x5b\x01\x0f\x29\x58\x9a\x2a\x4d\x3f\x9f\xd6\xc2\x4e\xcf\x98\x9e\xf2\x69\x32\xd7\xd1\x92\x1d\x80\xa9\xc4\x87\x79\x67\x59\x80\x6f\x8d\x1f\x22\xb1\xba\x41\x7c\xcc\x43\x35\x8e\xc3\x87\x4d\x7d\x70\xb1\xa3\xc2\xfa\x71\x6b\x1d\xcd\x21\x62\xe5\xdc\xb8\x59\x16\x5f\xea\x8c\x20\x0d\x16\x82\x8b\x3c\x65\x36\x6f\xbe\xf9\xea\xf5\xb1\x93\x89\x26\x10\x8f\x33\xa5\x42\x2a\x94\x37\xf0\xb6\x1a\xe5\x79\x81\x3f\x9d\x01\xf7\x75\x3b\xeb\xe9\x6f\x35\x91\x00\x35\x5c\xe7\x02\x47\xaf\xe1\x81\x0d\x20\xcc\x5f\x4f\x1d\x1f\x2e\x2e\x1d\x9c\x83\xcb\x9d\xd0\xc7\x4c\x99\x0d\xac\x5e\xa1\x58\x7f\x7d\xb9\xbd\xea\x96\x7a\x2f\xf8\x67\x4c\x97\x44\x3f\x0b\x70\x81\x0d\xa2\x1f\x06\xf4\x8b\x6b\xaa\xe7\x3c\x29\x80\xe0\x50\x03\xd1\x01\x0e\xec\xfc\x84\x06\xcf\x85\x91\x3a\x72\x75\x14\x33\x26\x61\x0c\x8b\x57\x6f\xbc\x76\x45\xaf\xc7\x4b\x51\xd8\xff\x12\xb7\xc1\x6a\x15\x4e\xae\x2d\xff\xce\x7f\xa4\xc6\xde\x5b\xf2\xc9\xb5\xc6\x39\xc3\x80\xbe\xe4\x69\x86\x40\xbe\xe9\x70\x26\x39\xc5\x26\xa2\xa4\x1d\xb2\xe8\xad\x8c\x8f\x18\x6a\x60\x0b\x6d\xe5\xec\x74\x0a\x41\x1e\x2e\xe5\xfc\x6f\x01\xf9\xa4\xa0\xbd\xc1\xb7\x30\x3b\x29\x3c\x13\x2c\x63\x58\x4c\x87\x59\xc8\x71\x78\xc8\x94\xa5\x06\xcc\x14\xc3\x59\x5c\x1a\x39\x31\xa4\xa3\x57\x6b\x60\x82\xfd\x1b\xc8\x64\x08\x1e\x9f\x56\x4a\x1c\x59\x3a\xe1\xcc\xa0\xe3\x67\x01\x64\x17\x49\xcf\xcc\x90\x8a\x22\x36\x10\xbc\x4e\x28\x8e\x1e\x6a\x46\x50\xcb\x43\xb1\x2e\x2a\x43\x7c\x86\xf4\x99\x42\xba\xd5\x6a\x99\x09\x4c\x11\xcc\x1a\x5e\x81\xeb\x58\x60\xe6\xe0\x51\x08\xeb\x13\xda\x8d\x2b\x58\x81\x0d\xa6\x77\x76\xb2\x2a\xd1\x4e\x67\x3a\x3f\x52\xb6\x88\x72\x3c\x50\xea\x8d\x1e\x82\xdf\x41\x32\xfb\x41\xc7\x52\x51\x0a\x32\x7c\xc8\x0f\x8f\x89\xee\x71\x06\x92\x91\x4e\x91\xa1\x5e\x6d\x7d\xa1\xa1\xe1\x83\xe6\x09\x0c\xe5\xaa\xa7\x0b\x8d\x15\x6f\x83\x4f\x60\x30\x2d\x99\x2d\x34\x57\x14\x89\xc7\x32\xe6\xc6\xf7\x57\x4f\x0b\xa9\x4e\x72\x27\x99\xde\x3b\x8e\xba\x97\x4c\x37\x99\x06\x56\x57\x78\x43\x16\xdc\x50\xea\x60\x28\x41\x2b\xba\x95\x9d\x9d\xec\x0e\x69\xaa\x04\x9f\x8f\xc6\x8f\xbb\xc1\xc8\xe7\xb2\x39\xdf\x53\x47\x72\xec\xc7\x6a\x95\x29\x2c\x9a\x88\x96\x7a\x97\x67\xc1\x25\xf0\x3f\x60\x3e\x4b\xe8\xfb\xe6\xba\x6c\x69\xb3\x2b\xff\x0a\x00\x00\xff\xff\xbf\xc4\x50\x98\x83\x3e\x00\x00")

func staticPagesWritingHtmlBytes() ([]byte, error) {
	return bindataRead(
		_staticPagesWritingHtml,
		"static/pages/writing.html",
	)
}

func staticPagesWritingHtml() (*asset, error) {
	bytes, err := staticPagesWritingHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "static/pages/writing.html", size: 16003, mode: os.FileMode(438), modTime: time.Unix(1600221752, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"static/pages/writing.html": staticPagesWritingHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"static": &bintree{nil, map[string]*bintree{
		"pages": &bintree{nil, map[string]*bintree{
			"writing.html": &bintree{staticPagesWritingHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
